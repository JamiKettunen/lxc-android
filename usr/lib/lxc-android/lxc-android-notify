#!/bin/sh

# When this script starts, the container is starting-up.
# On Android 10+ devices, we need to properly replicate APEX bind-mounts
# on the host system.

info() {
	echo "I: $@"
}

warning() {
	echo "W: $@" >&2
}

error() {
	echo "E: $@" >&2
	exit 1
}

get_source_apex_name() {
	case "${1}" in *.v[0-9][0-9]) NAME="${1%.v*}" ;; *) NAME="${1}" ;; esac

	for choice in ${NAME} ${NAME}.release ${NAME}.debug ${NAME}.current; do
		if [ -e "/android/system/apex/${choice}" ]; then
			echo "${choice}"
			break
		fi
	done
}

# Wait for the container
lxc-wait -n android -t 10 -s "RUNNING" || error "android container failed to start within 10 seconds"

# Get Android container version
ANDROID_SDK_VERSION=$(sed -n 's/ro.build.version.sdk=//p' /system/build.prop)
if [ "$(getconf LONG_BIT)" -eq 32 ]; then
	LIBDIR="lib"
else
	LIBDIR="lib64"
fi
if [ "${ANDROID_SDK_VERSION}" -ge 29 ]; then
	info "Detected Android 10+ container"

	# Wait for apex to show up
	HYBRIS_LD_LIBRARY_PATH="\
/android/system/apex/com.android.runtime/${LIBDIR}/bionic:\
/android/system/apex/com.android.runtime.release/${LIBDIR}/bionic:\
/android/system/apex/com.android.runtime.debug/${LIBDIR}/bionic:\
/android/system/${LIBDIR}" \
	WAITFORSERVICE_VALUE="ready" \
		waitforservice apexd.status

	info "apexd ready, replicating bind-mounts"
	for mpoint in /apex/*; do
		# TODO: Actually determine from where the directory has been bind-mounted
		# from, and support non-flattened apexes
		if [ ! -d "${mpoint}" ] || case ${mpoint} in /apex/*@*) true ;; *) false ;; esac; then
			continue
		fi

		apex=${mpoint##*/}
		target="/apex/${apex}"

		source_apex=$(get_source_apex_name ${apex})

		if [ -z "${source_apex}" ]; then
			warning "Unable to find source apex for apex ${apex}"
			continue
		fi

		source="/android/system/apex/${source_apex}"

		if [ -d "${source}" ]; then
			info "Replicating bind-mount for apex ${apex}"
			mount --bind ${source} ${target}
		fi
	done

	info "Setting up linkerconfig"
	mount -t tmpfs android_linkerconfig /linkerconfig
	/system/bin/linkerconfig --target /linkerconfig
	sed -i '' -E \
		-e 's:([^a-zA-Z])/:\1/android/:g' \
		-e 's:android/android/:android/:g' \
		/linkerconfig/ld.config.txt
else
	waitforservice init.svc.vndservicemanager
fi

# Notify dinit we're done (container ready)
echo > /dev/fd/${LXC_ANDROID_READY_FD}
info "'android' container has finished starting"

# Set hostname on initial boot
if [ -f /run/dinit/first-boot ]; then
	[ -f /etc/default/hostname ] && hostname="$(cat /etc/default/hostname)"
	if [ -z "${hostname}" ]; then
		device="$(getprop ro.product.vendor.device)"
		[ "${device}" ] && hostname="chimera-${device}"
	fi
	[ -z "${hostname}" ] && hostname="chimera"
	info "First boot, setting hostname to '${hostname}'"
	echo "${hostname}" > /etc/hostname
fi

# Block on lxc-wait
lxc-wait -n android -s "STOPPED"
